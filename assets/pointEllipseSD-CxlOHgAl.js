var I=Object.defineProperty;var D=(e,t,s)=>t in e?I(e,t,{enumerable:!0,configurable:!0,writable:!0,value:s}):e[t]=s;var n=(e,t,s)=>D(e,typeof t!="symbol"?t+"":t,s);import"./modulepreload-polyfill-B5Qt9EMX.js";import{P as M}from"./Point2D-DT7ddQd5.js";import{E as w}from"./Ellipse2D-DqNrrqgd.js";import{B as O}from"./Base2DScene-ETx5bN0u.js";import{G as c,V as p,C as r,a as P}from"./index-D1NIF6BJ.js";class S extends O{constructor(s,i,o,l){super(s);n(this,"point");n(this,"ellipse");n(this,"colorConnection");this.point=i,this.ellipse=o,this.colorConnection=l}buildScene(){this.geometryManager.createGeometry(c.Point,this.point.getId(),this.point.getParams());const s=this.geometryManager.getGeometryMesh(this.point.getId(),this.point.getColor(),"mesh");this.scene.add(s),this.geometryManager.createGeometry(c.Ellipse,this.ellipse.getId(),this.ellipse.getParams());const i=this.geometryManager.getGeometryMesh(this.ellipse.getId(),this.ellipse.getColor(),"mesh");this.scene.add(i),this.makeSlidersInteraction(this.point,this.ellipse,this.colorConnection);let o=this.geometryManager.calculateShortestDistance(this.point.getId(),this.ellipse.getId());this.drawShortestDistance(o[0],o[1],this.colorConnection)}}window.addEventListener("DOMContentLoaded",()=>{const e=document.getElementById("c"),t=new p(25,25),s="Point",i=r.SHAPE1_COLOR_2D,o=new M(e,t,s,i),l=new p(-25,-25),a=50,h=25,m=new P(0,0,90),d=100,g="Ellipse",C=r.SHAPE2_COLOR_2D,y=new w(e,l,a,h,m,d,g,C),E=r.CONNECTION_COLOR;new S(e,o,y,E).startAnimation()});
