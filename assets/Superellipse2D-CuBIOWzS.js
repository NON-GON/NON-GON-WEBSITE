var c=Object.defineProperty;var l=(i,t,s)=>t in i?c(i,t,{enumerable:!0,configurable:!0,writable:!0,value:s}):i[t]=s;var e=(i,t,s)=>l(i,typeof t!="symbol"?t+"":t,s);import{B as p}from"./Base2DScene-ETx5bN0u.js";import{G as g}from"./index-D1NIF6BJ.js";class G extends p{constructor(s,r,o,a,n,h,d,u,m){super(s);e(this,"center");e(this,"xradius");e(this,"yradius");e(this,"exponent");e(this,"rotation");e(this,"segments");e(this,"id");e(this,"color");this.center=r,this.xradius=o,this.yradius=a,this.exponent=n,this.rotation=h,this.segments=d,this.id=u,this.color=m}getParams(){return{center:this.center,xradius:this.xradius,yradius:this.yradius,exponent:this.exponent,rotation:this.rotation,segments:this.segments}}getSliderParams(){return{x_radius:this.xradius,y_radius:this.yradius,exponent:this.exponent}}getId(){return this.id}getColor(){return this.color}buildScene(){this.geometryManager.createGeometry(g.Supperellipse,this.id,this.getParams());const s=this.geometryManager.getGeometryMesh(this.id,this.color,"mesh");this.makeSlidersSolo(this.id,this.color,this.getSliderParams()),this.scene.add(s)}}export{G as S};
