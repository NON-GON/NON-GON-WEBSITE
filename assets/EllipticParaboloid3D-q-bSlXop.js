var c=Object.defineProperty;var u=(e,i,s)=>i in e?c(e,i,{enumerable:!0,configurable:!0,writable:!0,value:s}):e[i]=s;var t=(e,i,s)=>u(e,typeof i!="symbol"?i+"":i,s);import{B as l}from"./Base3DScene-CnN_KzWd.js";import{b as y}from"./index-D1NIF6BJ.js";class S extends l{constructor(s,r,h,a,o,d,n,g,m){super(s);t(this,"center");t(this,"xradius");t(this,"yradius");t(this,"height");t(this,"rotation");t(this,"segments");t(this,"id");t(this,"color");this.center=r,this.xradius=h,this.yradius=a,this.height=o,this.rotation=d,this.segments=n,this.id=g,this.color=m}getParams(){return{center:this.center,xradius:this.xradius,yradius:this.yradius,height:this.height,rotation:this.rotation,segments:this.segments}}getSliderParams(){return{x_radius:this.xradius,y_radius:this.xradius,height:this.height}}getId(){return this.id}getColor(){return this.color}buildScene(){this.geometryManager.createGeometry(y.EllipticParaboloid,this.id,this.getParams());const s=this.geometryManager.getGeometryMesh(this.id,this.color,"mesh");this.makeSlidersSolo(this.id,this.color,this.getSliderParams()),this.scene.add(s)}}export{S as E};
