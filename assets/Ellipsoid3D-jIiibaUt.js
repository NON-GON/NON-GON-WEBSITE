var c=Object.defineProperty;var l=(r,t,i)=>t in r?c(r,t,{enumerable:!0,configurable:!0,writable:!0,value:i}):r[t]=i;var s=(r,t,i)=>l(r,typeof t!="symbol"?t+"":t,i);import{B as g}from"./Base3DScene-Dqi25TmD.js";import{b as y}from"./index-CtOlyrrk.js";class S extends g{constructor(i,e,a,o,d,h,u,n,m){super(i);s(this,"center");s(this,"xradius");s(this,"yradius");s(this,"zradius");s(this,"rotation");s(this,"segments");s(this,"id");s(this,"color");this.center=e,this.xradius=a,this.yradius=o,this.zradius=d,this.rotation=h,this.segments=u,this.id=n,this.color=m}getParams(){return{center:this.center,xradius:this.xradius,yradius:this.yradius,zradius:this.zradius,rotation:this.rotation,segments:this.segments}}getSliderParams(){return{x_radius:this.xradius,y_radius:this.yradius,z_radius:this.zradius}}getId(){return this.id}getColor(){return this.color}buildScene(){this.geometryManager.createGeometry(y.Ellipsoid,this.id,this.getParams());const i=this.geometryManager.getGeometryMesh(this.id,this.color,"mesh");this.makeSlidersSolo(this.id,this.color,this.getSliderParams()),this.scene.add(i)}}export{S as E};
